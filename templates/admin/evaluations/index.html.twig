{% extends 'baseAdmin.html.twig' %}
{% block title %}Liste des Ã‰valuations{% endblock %}

{% block body %}
    <div class="container mt-4">
        <h2 class="cute-title">Ã‰valuations des Instructeurs</h2>
        {% if evaluations|length > 0 %}
            <div class="table-wrapper">
                <table class="table cute-table" id="evaluations-table">
                    <thead>
                        <tr>
                            <th>Nom</th>
                            <th>Email</th>
                            <th>Score</th>
                            <th>Niveau</th>
                            <th>Statut</th>
                            <th>Date</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        {% for evaluation in evaluations %}
                            <tr class="evaluation-row">
                                <td>{{ evaluation.instructor.nom ~ ' ' ~ evaluation.instructor.prenom }}</td>
                                <td>{{ evaluation.instructor.email }}</td>
                                <td>
                                    <span class="score-badge">{{ evaluation.score }}</span>
                                </td>
                                <td>
                                    <span style="font-weight: 500; color: {% if evaluation.niveau == 'Beginner' %}#ffc107{% elseif evaluation.niveau == 'Intermediate' %}#17a2b8{% else %}#28a745{% endif %}">
                                        {{ evaluation.niveau }}
                                    </span>
                                </td>
                                <td>
                                    <span class="status-dot {{ evaluation.status ? 'accepted' : 'not-accepted' }}"></span>
                                    {{ evaluation.status ? 'AcceptÃ©' : 'Non AcceptÃ©' }}
                                </td>
                                <td>{{ evaluation.dateCreation|date('d/m/Y') }}</td>
                                <td>
                                    <a href="{{ path('admin_evaluation_details', { id: evaluation.id }) }}" class="btn btn-sm btn-cute">DÃ©tails</a>
                                </td>
                            </tr>
                        {% endfor %}
                    </tbody>
                </table>
            </div>
        {% else %}
            <div class="empty-state">
                <p>Aucune Ã©valuation trouvÃ©e. ðŸ˜¿</p>
            </div>
        {% endif %}
    </div>
{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <style>
        /* Styling aligned with baseAdmin.html.twig */
        .cute-title {
            font-family: 'Nunito', sans-serif;
            color: #012970;
            font-size: 1.8rem;
            margin-bottom: 1.5rem;
            position: relative;
            display: inline-block;
        }
        .cute-title::after {
            content: 'âœ¨';
            position: absolute;
            right: -25px;
            top: 5px;
            font-size: 1.2rem;
            color: #4154f1;
        }

        .table-wrapper {
            background: #fff;
            border-radius: 10px;
            box-shadow: 0 0 20px rgba(1, 41, 112, 0.1);
            overflow: hidden;
        }

        .cute-table {
            margin-bottom: 0;
            border-collapse: separate;
            border-spacing: 0;
        }

        .cute-table thead th {
            background: #f6f9ff;
            color: #4154f1;
            font-weight: 600;
            padding: 15px;
            text-transform: uppercase;
            font-size: 0.9rem;
            letter-spacing: 0.5px;
            border-bottom: 2px solid #e6e9ff;
        }

        .evaluation-row td {
            padding: 12px 15px;
            vertical-align: middle;
            font-size: 0.95rem;
            color: #444444;
            border-bottom: 1px solid #f0f4fb;
            transition: background 0.2s ease;
        }

        .evaluation-row:hover {
            background: #f6f9ff;
        }

        .score-badge {
            display: inline-block;
            padding: 5px 10px;
            background: #e6e9ff;
            color: #4154f1;
            border-radius: 12px;
            font-weight: 500;
        }

    

        .status-dot {
            display: inline-block;
            width: 10px;
            height: 10px;
            border-radius: 50%;
            margin-right: 6px;
        }
        .status-dot.accepted { background: #28a745; }
        .status-dot.not-accepted { background: #dc3545; }

        .btn-cute {
            background: #4154f1;
            color: #fff;
            border: none;
            padding: 5px 12px;
            border-radius: 8px;
            font-size: 0.85rem;
            transition: transform 0.2s ease, box-shadow 0.2s ease;
        }
        .btn-cute:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 10px rgba(65, 84, 241, 0.3);
            background: #3644d9;
            color: #fff;
        }

        .empty-state {
            text-align: center;
            padding: 40px;
            background: #fff;
            border-radius: 10px;
            box-shadow: 0 0 20px rgba(1, 41, 112, 0.1);
            margin-top: 20px;
        }
        .empty-state p {
            font-size: 1.2rem;
            color: #899bbd;
        }
    </style>
{% endblock %}



{% block javascripts %}
    {{ parent() }}
    <script>
        // Function to fetch and update the evaluations list
        async function updateEvaluationsList() {
            // Ensure DOM is ready
            if (document.readyState === 'loading') {
                document.addEventListener('DOMContentLoaded', () => updateEvaluationsList());
                return;
            }

            const currentTable = document.querySelector('table#evaluations-table');
            if (!currentTable) {
                console.warn('Evaluations table not found on this page. Current URL:', window.location.pathname);
                alert('Erreur : La liste des Ã©valuations nâ€™est pas disponible sur cette page. RafraÃ®chissez ou naviguez vers /admin/evaluations.');
                return;
            }

            try {
                console.log('Attempting to fetch evaluations list. URL:', '{{ path('admin_evaluations') }}');
                const response = await fetch('{{ path('admin_evaluations') }}', {
                    headers: {
                        'Cache-Control': 'no-cache', // Prevent browser caching
                        'X-Requested-With': 'XMLHttpRequest' // Indicate AJAX request
                    },
                    credentials: 'same-origin' // Ensure cookies/credentials are included
                });
                if (!response.ok) {
                    throw new Error(`Erreur rÃ©seau : ${response.status} - ${response.statusText}`);
                }
                const html = await response.text();
                console.log('AJAX response received, parsing HTML...');
                const parser = new DOMParser();
                const doc = parser.parseFromString(html, 'text/html');
                const newTable = doc.querySelector('table#evaluations-table');

                if (newTable) {
                    console.log('Updating table with new content...');
                    currentTable.innerHTML = newTable.outerHTML; // Simplified for speed
                    // Reattach event listeners to "DÃ©tails" buttons after dynamic update
                    document.querySelectorAll('table#evaluations-table a.btn-info').forEach(button => {
                        button.addEventListener('click', function(e) {
                            e.preventDefault();
                            window.location.href = this.href;
                        });
                    });
                } else {
                    console.warn('New table not found in response. Response HTML:', html.substring(0, 200) + '...');
                    alert('Erreur : Impossible de mettre Ã  jour la liste des Ã©valuations. RafraÃ®chissez la page manuellement.');
                }
            } catch (error) {
                console.error('Erreur lors de la mise Ã  jour de la liste :', error);
                alert('Erreur lors de la mise Ã  jour de la liste : ' + error.message);
            }
        }

        // Ensure DOM is ready before adding event listeners
        document.addEventListener('DOMContentLoaded', () => {
            // Listen for the popstate event (triggered by back/forward navigation)
            window.addEventListener('popstate', () => {
                console.log('Back button detected, updating evaluations list. Current URL:', window.location.pathname);
                updateEvaluationsList();
            });

            // Initial update on page load to ensure fresh data
            console.log('Page loaded, updating evaluations list. Current URL:', window.location.pathname);
            updateEvaluationsList();

            // Optional: Re-run update when the page is visible after being hidden (e.g., tab switch)
            document.addEventListener('visibilitychange', () => {
                if (document.visibilityState === 'visible') {
                    console.log('Page visible, updating evaluations list. Current URL:', window.location.pathname);
                    updateEvaluationsList();
                }
            });
        });
    </script>
{% endblock %}