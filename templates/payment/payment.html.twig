{% extends 'base.html.twig' %}

{% block title %}Paiement{% endblock %}

{% block body %}
<meta name="viewport" content="width=device-width, initial-scale=1" />

<style>
    .content-wrapper {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        min-height: 80vh;
        padding: 20px;
    }

    .payment-container {
        background: #fff;
        padding: 20px;
        border-radius: 10px;
        box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.1);
        text-align: center;
        width: 100%;
        max-width: 400px;
    }

    h1 {
        font-size: 24px;
        margin-bottom: 10px;
    }

    .form-group {
        text-align: left;
        margin-bottom: 15px;
        width: 100%;
    }

    label {
        font-weight: bold;
    }

    input, select {
        width: 100%;
        padding: 8px;
        margin-top: 5px;
        border: 1px solid #ccc;
        border-radius: 5px;
    }

    button {
        background-color: #007bff;
        color: white;
        border: none;
        padding: 10px 20px;
        border-radius: 5px;
        font-size: 16px;
        cursor: pointer;
        width: 100%;
        margin-top: 10px;
    }

    button:disabled {
        background-color: #ccc;
        cursor: not-allowed;
    }

    #payment-message, #promo-message {
        margin-top: 10px;
        font-weight: bold;
        color: red;
        aria-live: polite;
    }

    .loading-spinner {
        display: none;
        width: 20px;
        height: 20px;
        border: 3px solid rgba(0, 0, 0, 0.1);
        border-left-color: #007bff;
        border-radius: 50%;
        animation: spin 1s linear infinite;
        margin: auto;
    }

    @keyframes spin {
        to { transform: rotate(360deg); }
    }
</style>

<div class="content-wrapper">
    <div class="payment-container">
        <h1>Page de Paiement</h1>
        <p>Veuillez entrer vos informations de paiement.</p>

        <form id="payment-form">
            <div class="form-group">
                <label for="card-element">Informations de la carte</label>
                <div id="card-element"></div> 
            </div>

            <div class="form-group">
                <label for="promo-code">Code promo (facultatif)</label>
                <input type="text" id="promo-code" placeholder="Entrez votre code promo">
                <button type="button" id="check-promo-button">Vérifier</button>
                <div class="loading-spinner" id="promo-loading-spinner"></div>
                <p id="promo-message"></p>
            </div>

            <button type="submit" id="pay-button">Payer {{ inscription_cour.formation.prix|e('js') }} DT</button>
            <div class="loading-spinner" id="loading-spinner"></div>
            <p id="payment-message"></p>
        </form>
    </div>
</div>

<script src="https://js.stripe.com/v3/"></script>
   <script>
      document.addEventListener("DOMContentLoaded", async function () {
    const stripe = Stripe("{{ stripe_public_key|e('js') }}");
    const elements = stripe.elements();
    const cardElement = elements.create("card", { hidePostalCode: true });
    cardElement.mount("#card-element");

    const payButton = document.getElementById("pay-button");
    const checkPromoButton = document.getElementById("check-promo-button");
    const promoMessage = document.getElementById("promo-message");
    const paymentMessage = document.getElementById("payment-message");
    const loadingSpinner = document.getElementById("loading-spinner");
    const promoSpinner = document.getElementById("promo-loading-spinner");
    let amount = parseFloat("{{ inscription_cour.formation.prix|e('js') }}") * 100;

    async function checkPromoCode() {
        const promoCode = document.getElementById("promo-code").value.trim();
        if (!promoCode) {
            promoMessage.textContent = "Veuillez entrer un code promo.";
            promoMessage.style.color = "red";
            return;
        }
        promoSpinner.style.display = "inline-block";
        checkPromoButton.disabled = true;

        try {
            const response = await fetch("{{ path('check_promo') }}", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ inscriptionId: {{ inscription_id }}, promoCode })
            });
            const data = await response.json();
            promoSpinner.style.display = "none";
            checkPromoButton.disabled = false;

            if (data.error) {
                promoMessage.textContent = "❌ " + data.error;
                promoMessage.style.color = "red";
            } else {
                promoMessage.textContent = "✅ " + data.message + " - Nouveau montant : " + data.montantApresRemise + " DT";
                promoMessage.style.color = "green";
                amount = parseFloat(data.montantApresRemise) * 100;
                payButton.textContent = "Payer " + data.montantApresRemise + " DT";
            }
        } catch (error) {
            promoSpinner.style.display = "none";
            checkPromoButton.disabled = false;
            promoMessage.textContent = "Une erreur est survenue lors de la vérification.";
            promoMessage.style.color = "red";
        }
    }

    async function handlePayment(event) {
    event.preventDefault();
    payButton.disabled = true;
    payButton.textContent = "Paiement en cours...";
    loadingSpinner.style.display = "block";

    try {
        const response = await fetch("{{ path('create_payment_intent') }}", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ inscriptionId: {{ inscription_id }}, amount })
        });
        const data = await response.json();

        if (!data.clientSecret) throw new Error("Problème avec l'API de paiement.");

        const result = await stripe.confirmCardPayment(data.clientSecret, { 
            payment_method: { card: cardElement } 
        });

        if (result.error) throw new Error(result.error.message);

        // ✅ Mise à jour du statut de l'inscription après paiement
        await fetch("{{ path('payment_success', {'id': inscription_id}) }}", {
            method: "GET",
            headers: { "Content-Type": "application/json" }
        });

        setTimeout(() => {
            window.location.replace("{{ path('payment_success_page', {'id': inscription_id}) }}");
        }, 1000);
    } catch (error) {
        payButton.disabled = false;
        payButton.textContent = "Payer " + (amount / 100).toFixed(2) + " DT";
        loadingSpinner.style.display = "none";
        paymentMessage.textContent = "❌ Erreur : " + error.message;
        paymentMessage.style.color = "red";
    }
}


    checkPromoButton.addEventListener("click", checkPromoCode);
    document.getElementById("payment-form").addEventListener("submit", handlePayment);
});
</script>
{% endblock %}
