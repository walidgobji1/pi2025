{% extends 'base.html.twig' %}


{% block body %}


	<style>
		.chat-box {
			max-height: 450px;
			overflow-y: auto;
			background: #f9f9f9;
			border-radius: 15px;
			padding: 20px;
			box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
			display: flex;
			flex-direction: column;
		}

		/* Liste des messages */
		.chat-messages {
			list-style: none;
			padding: 0;
			margin: 0;
			display: flex;
			flex-direction: column;
			overflow-y: auto;
			flex-grow: 1;

		}

		/* Message standard */
		.message {
			max-width: 70%;
			padding: 12px 16px;
			border-radius: 18px;
			font-size: 15px;
			display: flex;
			align-items: center;
			word-wrap: break-word;
			white-space: pre-wrap;
			margin-bottom: 12px;
			transition: all 0.3s ease;
		}

		/* Message envoy√© */
		.message.sent {
			background: #007bff;
			color: white;
			align-self: flex-end;
			border-bottom-right-radius: 0;
			box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
		}

		/* Message re√ßu */
		.message.received {
			background: #e0e0e0;
			align-self: flex-start;
			border-bottom-left-radius: 0;
			box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
		}

		/* Formulaire d'entr√©e */
		.chat-input {
			display: flex;
			align-items: center;
			padding: 15px;
			background: #ffffff;
			border-top: 2px solid #e1e1e1;
			border-radius: 10px;
		}

		/* Zone de texte */
		.chat-input textarea {
			flex: 1;
			border-radius: 10px;
			padding: 12px 15px;
			font-size: 14px;
			resize: none;
			border: 1px solid #ccc;
			height: 50px;
			box-shadow: inset 0 1px 3px rgba(0, 0, 0, 0.1);
			transition: all 0.3s ease;
		}

		/* Effet de focus sur la zone de texte */
		.chat-input textarea:focus {
			border-color: #007bff;
			outline: none;
		}

		/* Bouton envoyer */
		.chat-input button {
			padding: 10px 20px;
			border-radius: 15px;
			font-size: 14px;
			background: #007bff;
			color: white;
			border: none;
			margin-left: 10px;
			cursor: pointer;
			transition: all 0.3s ease;
		}

		/* Effet de hover pour le bouton envoyer */
		.chat-input button:hover {
			background: #0056b3;
		}

		/* Timestamps des messages */
		.timestamp {
			font-size: 12px;
			color: rgba(0, 0, 0, 0.6);
			margin-left: 10px;
		}

		/* Style de la liste des discussions */
		.scrollable-list {
			max-height: 450px;
			overflow-y: auto;
			margin-bottom: 20px;
		}

		/* Style de la discussion dans la liste */
		.list-unstyled li {
			padding: 12px;
			border-bottom: 1px solid #ddd;
			background-color: #f9f9f9;
			border-radius: 10px;
			margin-bottom: 10px;
			transition: background-color 0.3s ease;
			display: flex;
			justify-content: space-between;
			align-items: center;
		}

		/* Effet au survol des discussions */
		.list-unstyled li:hover {
			background-color: #f0f0f0;
		}

		/* Avatar de l'utilisateur dans la discussion */
		.rounded-circle {
			box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
		}

		/* Formulaire de suppression de la discussion */
		.btn-danger {
			background-color: #e74c3c;
			border-color: #e74c3c;
			border-radius: 12px;
			transition: all 0.3s ease;
		}

		/* Effet hover pour le bouton supprimer */
		.btn-danger:hover {
			background-color: #c0392b;
			border-color: #c0392b;
			text-align: center;
		}

		/* Formatage des boutons de suppression de message */
		.dropdown-menu li button {
			background: transparent;
			border: none;
			font-size: 14px;
			color: #c0392b;
		}

		/* Ajouter un style au bouton modifier */
		.dropdown-item {
			background-color: #f1f1f1;
		}

		/* Ajouter un fond pour la card contenant les discussions */
		.card-body {
			padding: 20px;
			background: #f9f9f9;
			border-radius: 10px;
		}

		/* R√©duire la taille du dropdown */
		.dropdown-menu {
			min-width: 150px;
			font-size: 14px;
			padding: 8px 0;
			border-radius: 8px;
			box-shadow: 0 8px 16px rgba(0, 0, 0, 0.1);
			background-color: #fff;
			border: 1px solid #ddd;
			opacity: 0;
			visibility: hidden;
			transform: translateY(-10px);
			transition: all 0.3s ease;
		}

		/* Effet de survol sur le menu dropdown */
		.dropdown-menu.show {
			opacity: 1;
			visibility: visible;
			transform: translateY(0);
		}

		/* Style des √©l√©ments du dropdown */
		.dropdown-item {
			padding: 10px 15px;
			color: #333;
			background-color: transparent;
			border: none;
			font-size: 14px;
			border-radius: 6px;
			transition: background-color 0.3s ease, color 0.3s ease;
		}

		/* Effet de survol des √©l√©ments du dropdown */
		.dropdown-item:hover {
			background-color: #f1f1f1;
			color: #007bff;
		}

		/* Bouton du dropdown */
		.dropdown-toggle {
			background-color: transparent;
			border: none;
			padding: 6px 12px;
			font-size: 14px;
			color: #555;
			border-radius: 6px;
			transition: background-color 0.3s ease, color 0.3s ease;
		}

		/* Effet de survol sur le bouton dropdown */
		.dropdown-toggle:hover {
			background-color: #f0f0f0;
			color: #007bff;
		}

		/* Ajout d'une ic√¥ne sur le bouton dropdown */
		.dropdown-toggle::after {
			content: ' ‚ñº';
			font-size: 10px;
			margin-left: 5px;
		}

		/* Modifier le bouton supprimer */
		.dropdown-item.text-danger {
			color: #e74c3c;
		}

		/* Effet de survol du bouton supprimer */
		.dropdown-item.text-danger:hover {
			background-color: #e74c3c;
			color: white;
		}
		/* Style de la liste des emojis dans le dropdown */
		.emoji-list {
			display: flex;
			flex-direction: column;
			padding: 0;
			margin: 0;
			list-style: none;
		}

		/* Style des √©l√©ments de la liste des emojis */
		.emoji-list li {
			display: block; /* Assure l'affichage vertical */
			margin-bottom: 10px; /* Espacement entre les emojis */
		}

		/* Style pour les boutons emoji dans le dropdown */
		.emoji-list .emoji {
			font-size: 20px;
			padding: 8px 15px;
			background-color: transparent;
			border: none;
			color: #555;
			width: 100%;
			text-align: left;
			transition: background-color 0.3s ease, color 0.3s ease;
			border-radius: 10px;
		}

		/* Effet de survol pour les boutons emoji */
		.emoji-list .emoji:hover {
			background-color: #f0f0f0;
			color: #4c89f5;
		}

		/*# sourceMappingURL=style.css.map */
	</style>
	<section>
		<div class="container mt-4">
			<div class="border rounded p-3 shadow bg-white">

				<div class="container py-5">
					<div
						class="row">
						<!-- Sidebar des discussions -->
						<div class="col-md-6 col-lg-5 col-xl-4 mb-4 mb-md-0">
							<h5 class="font-weight-bold mb-3 text-center text-lg-start">Discussions</h5>
							<div class="card">
								<div
									class="card-body">
									<!-- Champ de recherche -->
									<div class="input-group mb-3">
										<input type="text" id="searchDiscussion" class="form-control" placeholder="Rechercher une discussion...">
										<button id="searchButton" class="btn btn-primary">Rechercher</button>
									</div>

									<!-- Liste des discussions -->
									<ul class="list-unstyled mb-0 scrollable-list" id="discussionList">
										{% for discussion in discussions %}
											{% if discussion.receiver.id == app.user.id %}
												<li class="p-2 border-bottom bg-body-tertiary d-flex justify-content-between">
													<a href="{{ path('view_discussion', {id: discussion.id}) }}" class="d-flex justify-content-between text-decoration-none w-100">
														<div class="d-flex flex-row w-100">
															{% if app.user.image %}
																<img src="{{ asset('uploads/images/' ~ discussion.sender.image) }}" alt="avatar" class="rounded-circle d-flex align-self-center me-3 shadow-1-strong" width="50">
															{% else %}
																<img src="{{ asset('frontOffice/images/user.jpg') }}" alt="avatar" class="rounded-circle d-flex align-self-center me-3 shadow-1-strong" width="50">
															{% endif %}
															<div class="pt-1">
																<span style="font-size:1.2rem;">
																	{{ discussion.sender.nom }}
																	{{ discussion.sender.prenom }}
																</span>
															</div>
														</div>
													</a>
													<form action="{{ path('delete_discussion', {id: discussion.id}) }}" method="POST" onsubmit="return confirm('Voulez-vous vraiment supprimer cette discussion ?');">
														<button type="submit" class="btn btn-danger btn-sm delete-btn">üóë</button>
													</form>
												</li>
											{% elseif discussion.sender.id == app.user.id %}
												<li class="p-2 border-bottom bg-body-tertiary d-flex justify-content-between">
													<a href="{{ path('view_discussion', {id: discussion.id}) }}" class="d-flex justify-content-between text-decoration-none w-100">
														<div class="d-flex flex-row w-100">
															{% if app.user.image %}
																<img src="{{ asset('uploads/images/' ~ discussion.receiver.image) }}" alt="avatar" class="rounded-circle d-flex align-self-center me-3 shadow-1-strong" width="50">
															{% else %}
																<img src="{{ asset('frontOffice/images/user.jpg') }}" alt="avatar" class="rounded-circle d-flex align-self-center me-3 shadow-1-strong" width="50">
															{% endif %}
															<div class="pt-1">
																<span style="font-size: 1.2rem;">
																	{{ discussion.receiver.nom }}
																	{{ discussion.receiver.prenom }}
																</span>
															</div>
														</div>
													</a>
													<form action="{{ path('delete_discussion', {id: discussion.id}) }}" method="POST" onsubmit="return confirm('Voulez-vous vraiment supprimer cette discussion ?');">
														<button type="submit" class="btn btn-danger btn-sm delete-btn">üóë</button>
													</form>
												</li>
											{% endif %}
										{% else %}
											<li class="list-group-item text-muted">Aucune discussion disponible.</li>
										{% endfor %}
									</ul>

									<!-- Bouton nouvelle discussion -->
									<a href="{{ path('create_discussion') }}" class="btn btn-success mt-3">Nouvelle discussion</a>
								</div>
							</div>
						</div>


						<!-- Chatbox principale -->
						<div class="col-md-6 col-lg-7 col-xl-8">
							<h5 class="font-weight-bold mb-3 text-center text-lg-start">{% if discussion is defined and discussion %} Message avec  {% if discussion.receiver.id == app.user.id %} {{ discussion.sender.nom }}	{{ discussion.sender.prenom }} 
							                                                                         {% elseif discussion.sender.id == app.user.id %}{{ discussion.receiver.nom }}
																	{{ discussion.receiver.prenom }} {% else %} Vos Messages  {% endif %} {% endif %}
 </h5>

							{% if discussion is defined and discussion %}
								<div class="chat-box p-3">
									<ul class="list-unstyled chat-messages" id="chat-messages">
										{% for message in messages %}
											<li class="d-flex {% if message.sender.id == app.user.id %}justify-content-end{% else %}justify-content-start{% endif %} mb-3 align-items-center">
												{% if message.sender.id != app.user.id %}
													{% if app.user.image %}
														<img src="{{ asset('uploads/images/' ~ message.sender.image) }}" alt="avatar" class="rounded-circle d-flex align-self-center me-3 shadow-1-strong" width="50">
													{% else %}
														<img src="{{ asset('frontOffice/images/user.jpg') }}" alt="avatar" class="rounded-circle d-flex align-self-center me-3 shadow-1-strong" width="50">
													{% endif %}
												{% endif %}

												<div class="message {% if message.sender.id == app.user.id %}sent{% else %}received{% endif %}">
													<p class="mb-0">{{ message.content }}</p>
													<span class="timestamp">{{ message.createdAt|date('d/m/Y H:i') }}</span>
													{% if message.reaction %}
														<span class="selected-reaction">{{ message.reaction }}</span>
													{% endif %}
												</div>
												<div
													class="reaction mt-1">

													<!-- Bouton pour ouvrir la liste d'emojis -->
													<div class="dropdown">
														<button class="btn btn-light btn-sm reaction-button" type="button" id="reactionMenuButton{{ message.id }}" data-bs-toggle="dropdown" aria-expanded="false">
															üòä
														</button>

														<!-- Liste d'emojis -->
														<ul class="dropdown-menu emoji-list" aria-labelledby="reactionMenuButton{{ message.id }}">
															<li>
																<form action="{{ path('message_react', {id: message.id}) }}" method="POST">
																	<input type="hidden" name="reaction" value="‚ù§Ô∏è">
																	<button type="submit" class="dropdown-item emoji">‚ù§Ô∏è</button>
																</form>
															</li>
															<li>
																<form action="{{ path('message_react', {id: message.id}) }}" method="POST">
																	<input type="hidden" name="reaction" value="üòÇ">
																	<button type="submit" class="dropdown-item emoji">üòÇ</button>
																</form>
															</li>
															<li>
																<form action="{{ path('message_react', {id: message.id}) }}" method="POST">
																	<input type="hidden" name="reaction" value="üòÆ">
																	<button type="submit" class="dropdown-item emoji">üòÆ</button>
																</form>
															</li>
															<li>
																<form action="{{ path('message_react', {id: message.id}) }}" method="POST">
																	<input type="hidden" name="reaction" value="üò¢">
																	<button type="submit" class="dropdown-item emoji">üò¢</button>
																</form>
															</li>
															<li>
																<form action="{{ path('message_react', {id: message.id}) }}" method="POST">
																	<input type="hidden" name="reaction" value="üëç">
																	<button type="submit" class="dropdown-item emoji">üëç</button>
																</form>
															</li>
															<li>
																<form action="{{ path('message_react', {id: message.id}) }}" method="POST">
																	<input type="hidden" name="reaction" value="üëé">
																	<button type="submit" class="dropdown-item emoji">üëé</button>
																</form>
															</li>
														</ul>
													</div>


													{% if message.sender.id == app.user.id %}
														<div class="dropdown">
															<button class="btn btn-light btn-sm dropdown-toggle" type="button" id="dropdownMenuButton{{ message.id }}" data-bs-toggle="dropdown" aria-expanded="false">
																...
															</button>
															<ul class="dropdown-menu" aria-labelledby="dropdownMenuButton{{ message.id }}">
																<li>
																	<form action="{{ path('delete_message', {id: message.id}) }}" method="POST" onsubmit="return confirm('Voulez-vous vraiment supprimer ce message ?');">
																		<button type="submit" class="dropdown-item text-danger">üóë Supprimer</button>
																	</form>
																</li>
																<li>
																	<a href="{{ path('edit_message', {id: message.id}) }}" class="dropdown-item">‚úè Modifier</a>
																</li>
															</ul>
														</div>
													{% else %}
														<div class="dropdown">
															<button class="btn btn-light btn-sm dropdown-toggle" type="button" id="dropdownMenuButton{{ message.id }}" data-bs-toggle="dropdown" aria-expanded="false">
																...
															</button>
															<ul class="dropdown-menu" aria-labelledby="dropdownMenuButton{{ message.id }}">
																<li>
																	<form action="{{ path('delete_message', {id: message.id}) }}" method="POST" onsubmit="return confirm('Voulez-vous vraiment supprimer ce message ?');">
																		<button type="submit" class="dropdown-item text-danger">üóë Supprimer</button>
																	</form>
																</li>
															</ul>
														</div>

													{% endif %}
												</li>

											{% else %}
												<li class="text-muted text-center">Aucun message dans cette discussion.</li>
											{% endfor %}
										</ul>
									</div>

									<!-- Formulaire d'envoi -->
									<form action="{{ path('send_message') }}" method="POST" class="chat-input p-3" id="chat-form">
										<input type="hidden" name="discussion_id" value="{{ discussion.id }}">
										<input type="hidden" name="sender_id" value="{{ app.user.id }}">
										<textarea name="content" id="content" class="form-control" placeholder="Votre message..."></textarea>
										<button type="submit" class="btn btn-primary">Envoyer</button>
									</form>

									

									<!-- Affichage des erreurs -->
									{% for message in app.flashes('error') %}
										<p class="text-danger mt-1" style="font-size: 14px;">{{ message }}</p>
									{% endfor %}
									<!-- Bouton supprimer la discussion -->
									<form action="{{ path('delete_discussion', {id: discussion.id}) }}" method="POST" onsubmit="return confirm('Voulez-vous vraiment supprimer cette discussion ?');">
										<button type="submit" class="btn btn-danger">Supprimer cette discussion</button>
									</form>

								{% else %}
									<p class="text-center">S√©lectionnez une discussion pour commencer √† discuter.</p>
								{% endif %}
							</div>
						</div>
					</div>
				</div>
			</div>
		</div>
	</section>
	<script>

		document.addEventListener("DOMContentLoaded", function () { // ////////////////////////////////// SCROLL ///////////////////////////////////////////

function scrollToLastMessage() {
var chatMessages = document.getElementById("chat-messages");
if (chatMessages) {
let lastMessage = chatMessages.lastElementChild;
if (lastMessage) {
lastMessage.scrollIntoView({block: "end"}); // Scroll direct vers le dernier message
}
}
}

function scrollToBottomPage() {
window.scrollTo(0, document.body.scrollHeight); // Scroll pour toute la page
}

// Scroll automatique √† l'ouverture
scrollToLastMessage();
scrollToBottomPage();

// Scroll apr√®s l'envoi d'un message
document.getElementById("chat-form") ?. addEventListener("submit", function () {
setTimeout(() => {
scrollToLastMessage();
scrollToBottomPage();
}, 100);
});

// ////////////////////////////////////////// DROPDOWN /////////////////////////////////////////////



// ////////////////////////////////////////// EMOJIS /////////////////////////////////////////////

// Gestion de l'ouverture des r√©actions emoji
document.querySelectorAll('.reaction-button').forEach(function (button) {
button.addEventListener('click', function (event) {
event.stopPropagation();
let menu = this.nextElementSibling;

closeAllDropdowns(); // Ferme tous les autres menus avant d'afficher celui-ci
menu.classList.toggle('show');
});
});
});
document.addEventListener('DOMContentLoaded', function () {
const searchButton = document.getElementById('searchButton');
const searchInput = document.getElementById('searchDiscussion');
const discussionList = document.getElementById('discussionList');

searchButton.addEventListener('click', function () {
const query = searchInput.value;

if (query.length > 0) {
fetch (`/rechercher-discussion?query=${query}`, {method: 'GET'}).then(response => response.json()).then(data => { // Vider la liste des discussions existantes
discussionList.innerHTML = '';

if (data.length === 0) {
discussionList.innerHTML = '<li class="list-group-item text-muted">Aucune discussion trouv√©e.</li>';
} else { // Remplir la liste avec les discussions trouv√©es
data.forEach(discussion => {
const listItem = document.createElement('li');
listItem.classList.add('p-2', 'border-bottom', 'bg-body-tertiary', 'd-flex', 'justify-content-between');

let discussionHTML = '';

// Ajouter les conditions comme dans le Twig

if (discussion.receiver.id == {{ app.user.id }}) {
discussionHTML = `
                                <a href="/discussion/${
discussion.id
}" class="d-flex justify-content-between text-decoration-none w-100">
                                    <div class="d-flex flex-row w-100">
                                        <img src="/uploads/images/${
discussion.sender.image
}" alt="avatar" class="rounded-circle d-flex align-self-center me-3 shadow-1-strong" width="50">
                                        <div class="pt-1">
                                            <span style="font-size: 1.2rem;">
                                                ${
discussion.sender.nom
} ${
discussion.sender.prenom
}
                                            </span>
                                        </div>
                                    </div>
                                </a>
                            `;
} else if (discussion.sender.id == {{ app.user.id }}) {
discussionHTML = `
                                <a href="/discussion/${
discussion.id
}" class="d-flex justify-content-between text-decoration-none w-100">
                                    <div class="d-flex flex-row w-100">
                                        <img src="/uploads/images/${
discussion.receiver.image
}" alt="avatar" class="rounded-circle d-flex align-self-center me-3 shadow-1-strong" width="50">
                                        <div class="pt-1">
                                            <span style="font-size: 1.2rem;">
                                                ${
discussion.receiver.nom
} ${
discussion.receiver.prenom
}
                                            </span>
                                        </div>
                                    </div>
                                </a>
                            `;
}

listItem.innerHTML = discussionHTML;

// Ajouter le bouton de suppression de discussion
listItem.innerHTML += `
                            <form action="/discussion/delete/${
discussion.id
}" method="POST" onsubmit="return confirm('Voulez-vous vraiment supprimer cette discussion ?');">
                                <button type="submit" class="btn btn-danger btn-sm delete-btn">üóë</button>
                            </form>
                        `;

discussionList.appendChild(listItem);
});
}
});
}
});
});
const dropdownElements = document.querySelectorAll('.dropdown-toggle');
dropdownElements.forEach(dropdown => {
    new bootstrap.Dropdown(dropdown); // Initialiser Bootstrap dropdown pour chaque bouton
});
	</script>
	
<script>
 document.getElementById("chat-form").addEventListener("submit", function(e) {
    e.preventDefault();

    let formData = new FormData(this);
    let content = document.getElementById("content").value.trim();
    if (content === "") return;

    fetch("{{ path('send_message') }}", {
        method: "POST",
        body: formData
    })
    .then(response => response.json())
    .then(data => {
        if (data.error) {
            alert(data.error);
            return;
        }

        document.getElementById("content").value = "";
        // Laisse fetchMessages() g√©rer l'affichage
    })
    .catch(error => console.error("Erreur:", error));
});
</script>
<script>
let lastMessageId = 0; // ID du dernier message charg√©

function fetchMessages() {
    fetch("{{ path('fetch_messages', {discussion_id: discussion.id}) }}")
        .then(response => response.json())
        .then(data => {
            const chatMessages = document.getElementById("chat-messages");
            let newMessages = "";

            data.forEach(message => {
                if (message.id > lastMessageId) { // Si c'est un nouveau message
                    lastMessageId = message.id;

                    const isSender = message.sender_id === {{ app.user.id }};
                    newMessages += `
                        <li class="d-flex ${isSender ? "justify-content-end" : "justify-content-start"} mb-3 align-items-center">
                            ${!isSender ? `
                                <img src="${message.sender_image ? "{{ asset('uploads/images/') }}" + message.sender_image : "{{ asset('frontOffice/images/user.jpg') }}"}" 
                                     alt="avatar" class="rounded-circle d-flex align-self-center me-3 shadow-1-strong" width="50">
                            ` : ""}
                            
                            <div class="message ${isSender ? "sent" : "received"}">
                                <p class="mb-0">${message.content}</p>
                                <span class="timestamp">${message.createdAt}</span>
                                ${message.reaction ? `<span class="selected-reaction">${message.reaction}</span>` : ""}
                            </div>

                            <!-- Dropdown des r√©actions (Affich√© uniquement en cliquant sur un bouton) -->
                            <div class="reaction mt-1">
                                <div class="dropdown">
                                    <button class="btn btn-light btn-sm reaction-button" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                                        üòä
                                    </button>
                                    <ul class="dropdown-menu emoji-list">
                                        ${["‚ù§Ô∏è", "üòÇ", "üòÆ", "üò¢", "üëç", "üëé"].map(emoji => `
                                            <li>
                                                <button class="dropdown-item emoji react-button" data-message-id="${message.id}" data-emoji="${emoji}">
                                                    ${emoji}
                                                </button>
                                            </li>
                                        `).join("")}
                                    </ul>
                                </div>
                            </div>

                            <!-- Options du message (modifier/supprimer) -->
                            <div class="dropdown">
                                <button class="btn btn-light btn-sm dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                                    ...
                                </button>
                                <ul class="dropdown-menu">
                                    ${isSender ? `
                                        <li>
                                            <button class="dropdown-item text-danger delete-button" data-message-id="${message.id}">üóë Supprimer</button>
                                        </li>
                                        <li>
                                            <a href="{{ path('edit_message', {id: 'MESSAGE_ID'}) }}".replace('MESSAGE_ID', message.id)" class="dropdown-item">‚úè Modifier</a>
                                        </li>
                                    ` : `
                                        <li>
                                            <button class="dropdown-item text-danger delete-button" data-message-id="${message.id}">üóë Supprimer</button>
                                        </li>
                                    `}
                                </ul>
                            </div>
                        </li>
                    `;
                }
            });

   if (newMessages !== "") {
    chatMessages.innerHTML += newMessages;
    chatMessages.scrollTop = chatMessages.scrollHeight; // Scroll automatique vers le bas
    attachEventListeners();

    // V√©rifier si les dropdowns existent
    console.log("Dropdowns d√©tect√©s :", document.querySelectorAll('.dropdown-toggle'));

    // Initialisation manuelle des dropdowns
    document.querySelectorAll('.dropdown-toggle').forEach(dropdown => {
        let dropdownInstance = new bootstrap.Dropdown(dropdown);
        dropdown.addEventListener("click", function () {
            dropdownInstance.show();
        });
    });
}


            setTimeout(fetchMessages, 1000); // Rafra√Æchissement toutes les 1 seconde
        })
		

		
        .catch(error => console.error("Erreur de chargement des messages:", error));
}

// Attacher les √©v√©nements pour les r√©actions et la suppression
function attachEventListeners() {
    document.querySelectorAll(".react-button").forEach(button => {
        button.addEventListener("click", function() {
            const messageId = this.getAttribute("data-message-id");
            const emoji = this.getAttribute("data-emoji");
            reactToMessage(messageId, emoji);
        });
    });

    document.querySelectorAll(".delete-button").forEach(button => {
        button.addEventListener("click", function() {
            const messageId = this.getAttribute("data-message-id");
            if (confirm("Voulez-vous vraiment supprimer ce message ?")) {
                deleteMessage(messageId);
            }
        });
    });
}

// Fonction pour ajouter une r√©action √† un message
function reactToMessage(messageId, emoji) {
    fetch("{{ path('message_react', {id: 'MESSAGE_ID'}) }}".replace('MESSAGE_ID', messageId), {
        method: "POST",
        headers: { "Content-Type": "application/x-www-form-urlencoded" },
        body: `reaction=${emoji}`
    })
    .then(response => response.json())
    .then(data => {
        fetchMessages(); // Recharger les messages apr√®s ajout de r√©action
    })
    .catch(error => console.error("Erreur d'ajout de r√©action:", error));
}

// Fonction pour supprimer un message
function deleteMessage(messageId) {
    fetch("{{ path('delete_message', {id: 'MESSAGE_ID'}) }}".replace('MESSAGE_ID', messageId), {
        method: "POST"
    })
    .then(response => response.json())
    .then(data => {
        fetchMessages(); // Recharger les messages apr√®s suppression
    })
    .catch(error => console.error("Erreur de suppression:", error));
}


// Lancer la fonction au chargement de la page
fetchMessages();



</script>






	<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
	<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
	

{% endblock %}
